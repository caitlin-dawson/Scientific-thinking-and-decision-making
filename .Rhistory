all = TRUE)
data9 <- merge(data5, data6,
by = "Participant.Private.ID",
all = TRUE)
data10 <- merge(data7, data8,
by = "Participant.Private.ID",
all = TRUE)
data11 <- merge(data9, data_validQ,
by = "Participant.Private.ID",
all = TRUE)
data_Q_total <- merge(data10, data11,
by = "Participant.Private.ID",
all = TRUE)
# Clean the environment
rm(data1, data2, data3, data4, data5, data6, data7, data8, data9, data10, data11)
rm(data_big5Q, data_epiQ, data_heurQ, data_infoQ, data_inthumQ, data_needcloQ, data_needcogQ, data_openQ, data_rpQ, data_sciattQ, data_scicurQ)
# Save data for nonvalid ppts ("älä huomioi aineistoani") in a separate file prior to removal
data_nonvalid <- data_Q_total %>%
filter(Validity == "Ã„lÃ¤ huomioi aineistoani. Jokin muu syy esti minua osallistumasta kunnolla." | Validity == "Ã„lÃ¤ huomioi aineistoani. En suurimmaksi osaksi keskittynyt tai lukenut kysymyksiÃ¤ kunnolla.")
# Save data for participants with nonvalid language answers in a separate file. One participant who said "muu" but said they were fluent but not native level was included.
data_Q_lang_omit <- data_Q_total %>%
filter(Language != "Sujuva / Ã¤idinkieli" & Language != "Keskitaso / keskusteleva" & Language != "Muu, mikÃ¤?")
# Remove nonvalid participants
data_Q_total <- data_Q_total %>%
filter(Validity %in% c("Aineistoani voi kÃ¤yttÃ¤Ã¤.", "Muu, mikÃ¤? ", NA, "") & Language %in% c("Sujuva / Ã¤idinkieli", "Keskitaso / keskusteleva", "Muu, mikÃ¤?"))
# Big Five
b5 <- c("agreeablenessNormal", "emotionalStabilityNormal", "extroversionNormal", "conscientiousnessNormal", "opennessNormal", "agreeablenessReverse", "emotionalStabilityReverse", "extroversionReverse", "conscientiousnessReverse", "opennessReverse")
b5_rev <- c("agreeablenessReverse", "emotionalStabilityReverse", "extroversionReverse", "conscientiousnessReverse", "opennessReverse")
# Reverse-code
for (i in 1:length(b5_rev)) {
data_Q_total[, b5_rev[i]] <- reverse.code(keys = c(-1),
items = data_Q_total[, b5_rev[i]],
mini = c(1),
maxi = c(7))
}
# Describe: item-level
par(mfrow = c(2, 5))
for (i in 1:length(b5)) {
hist(as.numeric(data_Q_total[, b5[i]]),
main = colnames(data_Q_total[b5[i]]),
col = sample(colors(), 1),
breaks = seq(0, 7, 1),
xlab = ""
)
}
describe(data_Q_total[, b5])
# Calculate means
data_Q_total$AMean <- rowMeans(cbind(data_Q_total$agreeablenessNormal,
data_Q_total$agreeablenessReverse),
na.rm = TRUE)
data_Q_total$CMean <- rowMeans(cbind(data_Q_total$conscientiousnessNormal,                                     data_Q_total$conscientiousnessReverse),
na.rm = TRUE)
data_Q_total$EMean <- rowMeans(cbind(data_Q_total$extroversionNormal,
data_Q_total$extroversionReverse),
na.rm = TRUE)
data_Q_total$ESMean <- rowMeans(cbind(data_Q_total$emotionalStabilityNormal,
data_Q_total$emostabilityReverse),
na.rm = TRUE)
data_Q_total$OMean <- rowMeans(cbind(data_Q_total$opennessNormal,
data_Q_total$opennessReverse),
na.rm = TRUE)
# Replace mean score 0s with NAs (these participants stopped mid-questionnaire or before questionnaire and only have missing values)
data_Q_total$AMean[which(data_Q_total$AMean == 0)] <- NA
data_Q_total$OMean[which(data_Q_total$OMean == 0)] <- NA
data_Q_total$EMean[which(data_Q_total$EMean == 0)] <- NA
data_Q_total$CMean[which(data_Q_total$CMean == 0)] <- NA
data_Q_total$ESMean[which(data_Q_total$ESMean == 0)] <- NA
# Describe: mean score level
b5_mean <- c("AMean", "OMean", "EMean", "CMean", "ESMean")
par(mfrow = c(2, 3))
for (i in 1:length(b5_mean)) {
hist(data_Q_total[, b5_mean[i]],
main = colnames(data_Q_total[b5_mean[i]]),
col = sample(colors(), 1),
breaks = seq(0, 7, 1),
xlab = ""
)
}
describe(data_Q_total[, b5_mean])
# Epistemic Curiosity
epicur <- c(paste0("Icuriosity", 1:5), paste0("Dcuriosity", 1:5))
# Describe: item-level
par(mfrow = c(2, 5))
for (i in 1:length(epicur)) {
hist(data_Q_total[, epicur[i]],
main = colnames(data_Q_total[epicur[i]]),
col = sample(colors(), 1),
breaks = seq(0, 5, 1),
xlab = ""
)
}
describe(data_Q_total[, epicur])
# Cronbach's alphas
psych::alpha(data_Q_total[, epicur[1:5]])
psych::alpha(data_Q_total[, epicur[6:10]])
# Calculate sum scores
data_Q_total$ICuriositySum <- rowSums(cbind(data_Q_total$Icuriosity1, data_Q_total$Icuriosity2, data_Q_total$Icuriosity3, data_Q_total$Icuriosity4, data_Q_total$Icuriosity5), na.rm = TRUE)
data_Q_total$DCuriositySum <- rowSums(cbind(data_Q_total$Dcuriosity1, data_Q_total$Dcuriosity2, data_Q_total$Dcuriosity3, data_Q_total$Dcuriosity4, data_Q_total$Dcuriosity5), na.rm = TRUE)
# Replace sum score 0s with NAs (these participants stopped mid-questionnaire or before questionnaire and only have missing values)
data_Q_total$ICuriositySum[which(data_Q_total$ICuriositySum == 0)] <- NA
data_Q_total$DCuriositySum[which(data_Q_total$DCuriositySum == 0)] <- NA
# Describe: sum score level
epicur_sum <- c("ICuriositySum", "DCuriositySum")
par(mfrow = c(1, 2))
for (i in 1:length(epicur_sum)) {
hist(data_Q_total[, epicur_sum[i]],
main = colnames(data_Q_total[epicur_sum[i]]),
col = sample(colors(), 1),
xlab = ""
)
}
describe(data_Q_total[, c(epicur_sum)])
# Intellectual Humility
IH <- c(paste0("IH", 1:5, "rev1"), paste0("IH", 6:10, "norm2"),
paste0("IH", 11:16, "norm3"), paste0("IH", 17:22, "rev4"))
IH_rev <- c(paste0("IH", 1:5, "rev1"), paste0("IH", 17:22, "rev4"))
# Reverse-code
for (i in 1:length(IH_rev)) {
data_Q_total[, IH_rev[i]] <- reverse.code(keys = c(-1),
items = data_Q_total[, IH_rev[i]],
mini = c(1),
maxi = c(5))
}
# Describe: item-level
par(mfrow = c(2, 3))
for (i in 1:length(IH)) {
hist(data_Q_total[, IH[i]],
main = colnames(data_Q_total[IH[i]]),
col = sample(colors(), 1),
breaks = seq(0, 5, 1),
xlab = ""
)
}
describe(data_Q_total[, IH])
# Cronbach's alphas
psych::alpha(data_Q_total[, IH[1:5]])
psych::alpha(data_Q_total[, IH[6:10]])
psych::alpha(data_Q_total[, IH[11:16]])
psych::alpha(data_Q_total[, IH[17:22]])
# Intellectual Humility Scoring
# https://seaver.pepperdine.edu/social-science/content/comprehensive-intellectual-humility.pdf -> sum scores
# Calculate sum scores
data_Q_total$IH1Sum <- rowSums(cbind(data_Q_total$IH1rev1, data_Q_total$IH2rev1, data_Q_total$IH3rev1, data_Q_total$IH4rev1, data_Q_total$IH5rev1), na.rm = TRUE)
data_Q_total$IH2Sum <- rowSums(cbind(data_Q_total$IH6norm2, data_Q_total$IH7norm2, data_Q_total$IH8norm2, data_Q_total$IH9norm2, data_Q_total$IH10norm2), na.rm = TRUE)
data_Q_total$IH3Sum <- rowSums(cbind(data_Q_total$IH11norm3, data_Q_total$IH12norm3, data_Q_total$IH13norm3, data_Q_total$IH14norm3, data_Q_total$IH15norm3), na.rm = TRUE)
data_Q_total$IH4Sum <- rowSums(cbind(data_Q_total$IH17rev4, data_Q_total$IH18rev4, data_Q_total$IH19rev4, data_Q_total$IH20rev4, data_Q_total$IH21rev4), na.rm = TRUE)
# Replace sum score 0s with NAs
data_Q_total$IH1Sum[which(data_Q_total$IH1Sum == 0)] <- NA
data_Q_total$IH2Sum[which(data_Q_total$IH2Sum == 0)] <- NA
data_Q_total$IH3Sum[which(data_Q_total$IH3Sum == 0)] <- NA
data_Q_total$IH4Sum[which(data_Q_total$IH4Sum == 0)] <- NA
# Describe: sum score level
IH_sum <- c("IH1Sum", "IH2Sum", "IH3Sum", "IH4Sum")
par(mfrow = c(2, 2))
for (i in 1:length(IH_sum)) {
hist(data_Q_total[, IH_sum[i]],
main = colnames(data_Q_total[IH_sum[i]]),
col = sample(colors(), 1),
xlab = ""
)
}
describe(data_Q_total[, IH_sum])
# Need for Closure
need_clo <- paste0("closure", 1:15)
# Describe: item-level
par(mfrow = c(3, 5))
for (i in 1:length(need_clo)) {
hist(data_Q_total[, need_clo[i]],
main = colnames(data_Q_total[need_clo[i]]),
breaks = seq(0, 6, 1),
col = sample(colors(), 1),
xlab = ""
)
}
describe(data_Q_total[, need_clo])
# Cronbach's alphas
psych::alpha(data_Q_total[, need_clo])
# Need for Closure Scoring
# https://www.midss.org/sites/default/files/need_for_closure_scale.pdf
# Not entirely sure if this is the correct file but it says to sum so I'll do that here
# Calculate sum score
data_Q_total$CloSum <- rowSums(cbind(data_Q_total$closure1, data_Q_total$closure2, data_Q_total$closure3, data_Q_total$closure4, data_Q_total$closure5, data_Q_total$closure6, data_Q_total$closure7, data_Q_total$closure8, data_Q_total$closure9, data_Q_total$closure10, data_Q_total$closure11, data_Q_total$closure12, data_Q_total$closure13, data_Q_total$closure14, data_Q_total$closure15), na.rm = TRUE)
# Replace sum score 0s with NAs
data_Q_total$CloSum[which(data_Q_total$CloSum == 0)] <- NA
# Describe: sum score level
describe(data_Q_total$CloSum)
hist(data_Q_total$CloSum,
main = "Need for Closure",
col = rainbow(14),
ylim = c(0, 12),
breaks = seq(0, 80, 1),
xlab = "")
# Need for Cognition
need_cog <- c(paste0("cognition", c(1:2, 6, 10:11, 13:15, 18)),
paste0("cognition", c(3:5, 7:9, 12, 16:17), ".rev"))
need_cog_rev <- paste0("cognition", c(3:5, 7:9, 12, 16:17), ".rev")
# Reverse-code
for (i in 1:length(need_cog_rev)) {
data_Q_total[, need_cog_rev[i]] <- reverse.code(keys = c(-1),
items = data_Q_total[, need_cog_rev[i]],
mini = c(1),
maxi = c(6))
}
# Describe: item-level
par(mfrow = c(3, 6))
for (i in 1:length(need_cog)) {
hist(data_Q_total[, need_cog[i]],
main = colnames(data_Q_total[need_cog[i]]),
breaks = seq(0, 6, 1),
col = sample(colors(), 1),
xlab = ""
)
}
describe(data_Q_total[, need_cog])
# Cronbach's alphas
psych::alpha(data_Q_total[, need_cog])
# Need for Cognition Scoring
# https://centerofinquiry.org/uncategorized/need-for-cognition-scale-wabash-national-study/
# According to this source you should calculate the sum score for this scale
# Calculate sum score
data_Q_total$CogSum <- rowSums(cbind(data_Q_total$cognition1, data_Q_total$cognition2, data_Q_total$cognition3.rev, data_Q_total$cognition4.rev, data_Q_total$cognition5.rev, data_Q_total$cognition6, data_Q_total$cognition7.rev, data_Q_total$cognition8.rev, data_Q_total$cognition9.rev, data_Q_total$cognition10, data_Q_total$cognition11, data_Q_total$cognition12.rev, data_Q_total$cognition13, data_Q_total$cognition14, data_Q_total$cognition15, data_Q_total$cognition16.rev, data_Q_total$cognition17.rev, data_Q_total$cognition18), na.rm = TRUE)
# Replace sum score 0s with NAs
data_Q_total$CogSum[which(data_Q_total$CogSum == 0)] <- NA
# Describe: sum-score level
describe(data_Q_total$CogSum)
hist(data_Q_total$CogSum,
main = "Need for Cognition",
col = rainbow(14),
xlab = "")
# Actively Openminded Thinking
aot <- c(paste0("openReverse", 1:4), paste0("openNormal", 1:3))
aot_rev <- paste0("openReverse", 1:4)
# Reverse-code
for (i in 1:length(aot_rev)) {
data_Q_total[, aot_rev[i]] <- reverse.code(keys = c(-1),
items = data_Q_total[, aot_rev[i]],
mini = c(1),
maxi = c(7))
}
# Describe: item-level
par(mfrow = c(2, 4))
for (i in 1:length(aot)) {
hist(data_Q_total[, aot[i]],
main = colnames(data_Q_total[aot[i]]),
col = sample(colors(), 1),
breaks = seq(0, 7, 1),
xlab = "")
}
describe(data_Q_total[, aot])
# Cronbach's alpha
psych::alpha(data_Q_total[, aot])
# Actively Openminded Thinking Scoring
# https://www.sciencedirect.com/science/article/pii/S1871187119303700
# Again, this article says to do a sum score
# Calculate sum score
data_Q_total$AOTSum <- rowSums(cbind(data_Q_total$openNormal1, data_Q_total$openNormal2, data_Q_total$openNormal3, data_Q_total$openReverse1, data_Q_total$openReverse2, data_Q_total$openReverse3, data_Q_total$openReverse4), na.rm = TRUE)
# Replace sum score 0s with NAs
data_Q_total$AOTSum[which(data_Q_total$AOTSum == 0)] <- NA
# Describe: sum-score level
describe(data_Q_total$AOTSum)
hist(data_Q_total$AOTSum,
main = "Actively Openminded Thinking",
col = rainbow(14),
xlab = "")
# Science Attitudes
sci_att <- c(paste0("sa.1", letters[1:8]), paste0("sa.2", letters[1:4]))
sci_att_rev <- c("sa.1b", "sa.1d", "sa.2a", "sa.2b", "sa.2d")
# Reverse-code
for (i in 1:length(sci_att_rev)) {
data_Q_total[, sci_att_rev[i]] <- reverse.code(keys = c(-1),
items = data_Q_total[, sci_att_rev[i]],
mini = c(1),
maxi = c(5))
}
# Describe: item-level
par(mfrow = c(2, 2))
for (i in 1:length(sci_att)) {
hist(data_Q_total[, sci_att[i]],
main = colnames(data_Q_total[sci_att[i]]),
col = sample(colors(), 1),
breaks = seq(0, 7, 1),
xlab = "")
}
describe(data_Q_total[, sci_att])
# Cronbach's alphas
psych::alpha(data_Q_total[, sci_att])
# Calculate sum score
data_Q_total$sci_id <- rowSums(cbind(data_Q_total$sa.1a, data_Q_total$sa.1b, data_Q_total$sa.1d, data_Q_total$sa.1g), na.rm = TRUE)
data_Q_total$sci_impo <- rowSums(cbind(data_Q_total$sa.1c, data_Q_total$sa.1e, data_Q_total$sa.1h, data_Q_total$sa.1f), na.rm = TRUE)
data_Q_total$sci_tru <- rowSums(cbind(data_Q_total$sa.2a, data_Q_total$sa.2b, data_Q_total$sa.2c, data_Q_total$sa.2d), na.rm = TRUE)
# Replace total score zeroes with NA
data_Q_total$sci_id[which(data_Q_total$sci_id == 0)] <- NA
data_Q_total$sci_impo[which(data_Q_total$sci_impo == 0)] <- NA
data_Q_total$sci_tru[which(data_Q_total$sci_tru == 0)] <- NA
# Describe: sum-score level
sci_att_sum <- c("sci_id", "sci_impo", "sci_tru")
describe(data_Q_total[, sci_att_sum])
par(mfrow = c(3, 1))
for (i in 1:length(sci_att_sum)) {
hist(data_Q_total[, sci_att_sum[i]],
main = colnames(data_Q_total[sci_att_sum[i]]),
col = sample(colors(), 1),
xlab = "")
}
# Science Curiosity
sci_cur <- paste0("sc.", 1:4, ".quantised")
# Describe: item-level
par(mfrow = c(2, 2))
for (i in 1:length(sci_cur)) {
hist(data_Q_total[, sci_cur[i]],
main = colnames(data_Q_total[sci_cur[i]]),
col = sample(colors(), 1),
breaks = seq(0, 7, 1),
xlab = "")
}
describe(data_Q_total[, sci_cur])
# Cronbach's alpha
psych::alpha(data_Q_total[, sci_cur])
# Calculate sum score
data_Q_total$sci_cur <- rowSums(cbind(data_Q_total$sc.1.quantised, data_Q_total$sc.2.quantised, data_Q_total$sc.3.quantised, data_Q_total$sc.4.quantised), na.rm = TRUE)
# Replace sum score 0s with NAs
data_Q_total$sci_cur[which(data_Q_total$sci_cur == 0)] <- NA
# Describe: sum-score level
describe(data_Q_total$sci_cur)
hist(data_Q_total$sci_cur,
col = sample(colors(), 1),
xlab = "")
# Q1
data_Q_total$hr.1 <- as.factor(data_Q_total$hr.1)
levels(data_Q_total$hr.1) <- list("N" = "Kumpikin on yhtÃ¤ todennÃ¤kÃ¶istÃ¤", "H-R" = "Kuudes lapsi on tyttÃ¶", "Neither" = "Kuudes lapsi on poika")
# Q2
data_Q_total$hr.2 <- as.factor(data_Q_total$hr.2)
levels(data_Q_total$hr.2) <- list("N" = "Kummatkin sarjat ovat yhtÃ¤ todennÃ¤kÃ¶isiÃ¤", "H-R" = "THHTHT", "Neither" = "HTHTHT")
# Q3
# 3.1
data_Q_total$hr.3.1 <- as.factor(data_Q_total$hr.3.1)
levels(data_Q_total$hr.3.1) <- list("b" = "Herra F. sai sydÃ¤nkohtauksen", "a" = "Herra F. on yli 55-vuotias ja on saanut sydÃ¤nkohtauksen", "c" = "Herra F.:llÃ¤ on suuri perhe")
# 3.2
data_Q_total$hr.3.2 <- as.factor(data_Q_total$hr.3.2)
levels(data_Q_total$hr.3.2) <- list("b" = "Herra F. sai sydÃ¤nkohtauksen", "a" = "Herra F. on yli 55-vuotias ja on saanut sydÃ¤nkohtauksen", "c" = "Herra F.:llÃ¤ on suuri perhe")
# 3.3
data_Q_total$hr.3.3 <- as.factor(data_Q_total$hr.3.3)
levels(data_Q_total$hr.3.3) <- list("b" = "Herra F. sai sydÃ¤nkohtauksen", "a" = "Herra F. on yli 55-vuotias ja on saanut sydÃ¤nkohtauksen", "c" = "Herra F.:llÃ¤ on suuri perhe")
# Create the variables for the combinations of answers
# abc / acb / cab = N; bac / bca /cba = H-R
data_Q_total <- data_Q_total %>%
mutate(hr.3.updated = case_when(
((hr.3.1 == "b" & (hr.3.2 == "a" | hr.3.3 == "a")) | hr.3.2 == "b" & hr.3.3 == "a") ~ "H-R",
((hr.3.1 == "a" & (hr.3.2 == "b" | hr.3.3 == "b")) | (hr.3.2 == "a" & hr.3.3 == "b")) ~ "N"
))
data_Q_total$hr.3.updated <- factor(data_Q_total$hr.3.updated)
# Q4
data_Q_total$hr.4 <- as.factor(data_Q_total$hr.4)
levels(data_Q_total$hr.4) <- list("H-E" = "Kumpikin on yhtÃ¤ tehokas", "N" = "Kognitiivis-behavioraalista terapiaa", "Neither" = "LÃ¤Ã¤kehoitoa")
# Kognitiivis-behavioraalista terapiaa = N; Yhta tehokas = H-E
# Q5
data_Q_total$hr.5 <- as.factor(data_Q_total$hr.5)
levels(data_Q_total$hr.5) <- list("N" = "Huomenna luultavasti sataa", "H-E" = "On mahdotonta sanoa sataako huomenna vai ei", "Neither" = "Huomenna sataa")
# Huomenna luultavasti sataa = N; On mahdotonta sanoa sataako huomenna vai ei = H-E
# Q6
data_Q_total$hr.6 <- as.factor(data_Q_total$hr.6)
levels(data_Q_total$hr.6) <- list("N" = "TyttÃ¶", "H-E" = "Kumpikin on yhtÃ¤ todennÃ¤kÃ¶istÃ¤", "Neither" = "Poika")
# Tytto = N; Kumpikin on yht? todenn?k?ist? = H-E
# Calculate sums
data_Q_total <- data_Q_total %>%
mutate(
total_N = apply(., 1, function(x) length(which(x == "N"))),
total_HR = apply(., 1, function(x) length(which(x == "H-R"))),
total_HE = apply(., 1, function(x) length(which(x == "H-E"))),
total_Neither = apply(., 1, function(x) length(which(x == "Neither")))
)
# Omit participants with 0s in all the sum columns
heur <- c("total_N", "total_HR", "total_HE", "total_Neither")
data_Q_total[which(data_Q_total$total_N == 0 & data_Q_total$total_HR == 0 & data_Q_total$total_HE == 0 & data_Q_total$total_Neither == 0), heur] <- NA
# Check that sum scores add up to 6
sum_heur <- data_Q_total %>%
select(total_N, total_HR, total_HE, total_Neither) %>%
rowwise() %>%
mutate(sum_heur = total_N + total_HR + total_HE + total_Neither) %>%
select(sum_heur)
table(sum_heur$sum_heur)
# Describe: sum score level
describe(data_Q_total[, heur])
par(mfrow = c(2, 2))
for (i in 1:length(heur)) {
hist(data_Q_total[, heur[i]],
main = colnames(data_Q_total[heur[i]]),
col = sample(colors(), 1),
xlab = "")
}
# Create binary heuristic scores (0=0, 1=everything else)
data_Q_total <- data_Q_total %>%
mutate(HEscore = case_when(total_HE == 0 ~ 0,
total_HE == 1 ~ 1,
total_HE == 2 ~ 1),
HRscore = case_when(total_HR == 0 ~ 0,
total_HR == 1 ~ 1,
total_HR == 2 ~ 1))
# Add a measure of total heuristic response, where 1 = at least one mistake in one heuristic category, 2 = at least 1 heuristic mistake in both heuristic categories, 0 = all normative responses
data_Q_total <- data_Q_total %>%
group_by(Participant.Private.ID) %>%
mutate(HEHRscore = HEscore + HRscore)
# Q1: Sairaala B is the correct answer
# Create a new column
data_Q_total$rp.1 <- as.factor(data_Q_total$rp.1)
data_Q_total <- data_Q_total %>%
mutate(rp.1.int = case_when(rp.1 == "Sairaalassa B (jossa syntyy 10 lasta pÃ¤ivÃ¤ssÃ¤)." ~ 1,
rp.1 %in% c("Sairaalassa A (jossa syntyy 50 lasta pÃ¤ivÃ¤ssÃ¤).", "TÃ¤mÃ¤ on yhtÃ¤ todennÃ¤kÃ¶istÃ¤ kummassakin sairaalassa.") ~ 0))
# Q2: Pyydys1 AND Pyydys 2 is the correct combination
data_Q_total$rp.2.1 <- as.factor(data_Q_total$rp.2.1)
data_Q_total$rp.2.2 <- as.factor(data_Q_total$rp.2.2)
data_Q_total$rp.2.3 <- as.factor(data_Q_total$rp.2.3)
data_Q_total$rp.2.4 <- as.factor(data_Q_total$rp.2.4)
data_Q_total$rp.2.5 <- as.factor(data_Q_total$rp.2.5)
data_Q_total$rp.2.6 <- as.factor(data_Q_total$rp.2.6)
data_Q_total$rp.2.7 <- as.factor(data_Q_total$rp.2.7)
data_Q_total$rp.2.8 <- as.factor(data_Q_total$rp.2.8)
# Create a new column
# NAs are initially coded as 2 and wrong answers (0s) as NAs; then these are recoded
data_Q_total <- data_Q_total %>%
mutate(rp.2.int = case_when((rp.2.1 == "Pyydys 1" & rp.2.2 == "Pyydys 2" & rp.2.3 == "" & rp.2.4 == "" & rp.2.5 == "" & rp.2.6 == "" & rp.2.7 == "" & rp.2.8 == "") ~ 1,
is.na(rp.2.8) ~ 2))
data_Q_total[which(is.na(data_Q_total$rp.2.int)), "rp.2.int"] <- 0
data_Q_total[which(data_Q_total$rp.2.int == 2), ] <- NA
# Q3: Kanava 1; 2 tai 3 is the correct answer
# Create a new column
data_Q_total <- data_Q_total %>%
mutate(rp.3.int = case_when(rp.3.quantised == "4" ~ 1,
rp.3.quantised != "4" ~ 0))
# Q4: Ruudukot A; B ja C is the correct answer
# Create a new column
data_Q_total <- data_Q_total %>%
mutate(rp.4.int = case_when(rp.4.quantised == "5" ~ 1,
rp.4.quantised != "5" ~ 0))
# Calculate the sum score for the randomness/probability questions
data_Q_total <- data_Q_total %>%
mutate(RPSum = rp.1.int + rp.2.int + rp.3.int + rp.4.int)
# Describe
describe(data_Q_total$RPSum)
hist(data_Q_total$RPSum,
main = "RPSum",
col = sample(colors(), 1),
xlab = "")
# Omit columns that are not relevant (experiment-general columns) + rows that are not relevant (e.g., practice trials)
data_matreasT <- data_matreasT %>%
select(Participant.Private.ID, Spreadsheet:ANSWER) %>%
filter(display %in% c("TehtÃ¤vÃ¤_6", "TehtÃ¤vÃ¤_8"))
# Omit participants who commented that they had technical issues with this task or did not understand the task
data_matreasT <- data_matreasT %>%
filter(Participant.Private.ID != "5555882" & Participant.Private.ID != "5608075" & Participant.Private.ID != "4887607")
# Extract the relevant information
data_matreasT_final <- data_matreasT %>%
group_by(Participant.Private.ID) %>%
summarise(MatrixCorrectCount = sum(Correct, na.rm = TRUE)) %>%
select(Participant.Private.ID, MatrixCorrectCount)
# Exclude participants with invalid responses
data_ValidityFlag <- data_validQ %>%
select(Participant.Private.ID, Validity.quantised)
data_Language <- data_demoQ %>%
select(Participant.Private.ID, Language)
data_matrixValidity <- merge(data_Language, data_ValidityFlag,
by = "Participant.Private.ID",
all = TRUE)
data_matreasT_final <- merge(data_matreasT_final, data_matrixValidity,
by = "Participant.Private.ID",
all = TRUE)
# Create separate df for nonvalid ppts
data_nonvalid_matrix <- data_matreasT_final %>%
filter(Validity.quantised %in% c(2, 3, 4))
data_Q_lang_omit_matrix <- data_matreasT_final %>%
filter(Language != "Sujuva / Ã¤idinkieli" & Language != "Keskitaso / keskusteleva" & Language != "Muu, mikÃ¤?")
data_matreasT_final <- data_matreasT_final %>%
filter(Validity.quantised %in% c("1", NA, "") & Language %in% c("Sujuva / Ã¤idinkieli", "Keskitaso / keskusteleva", "Muu, mikÃ¤?"))
# Delete the irrelevant columns
data_matreasT_final <- data_matreasT_final %>%
select(Participant.Private.ID, MatrixCorrectCount)
# Describe
describe(data_matreasT_final$MatrixCorrectCount)
hist(data_matreasT_final$MatrixCorrectCount,
main = "Matrix Score",
col = rainbow(14),
xlab = "")
# Merge the important columns
data_Q_sub <- data_Q_total %>%
select(Participant.Private.ID, gender, Age, Country, Language, Education, AMean, CMean, EMean, ESMean, OMean, ICuriositySum, DCuriositySum, IH1Sum, IH2Sum, IH3Sum, IH4Sum, CloSum, CogSum, AOTSum, HEscore, HRscore, RPSum, sci_cur, sci_tru, sci_impo, sci_id)
# Add matrix reasoning data to the dataframe
data_Q_sub <- merge(data_Q_sub, data_matreasT_final,
by = "Participant.Private.ID",
all = TRUE)
# Get rid of NaNs or string NAs introduced by calculations
is.nan.data.frame <- function(x)
do.call(cbind, lapply(x, is.nan))
data_Q_sub[is.nan(data_Q_sub)] <- NA
# Numeric variables into numeric
data_Q_sub$MatrixCorrectCount <- as.numeric(data_Q_sub$MatrixCorrectCount)
data_Q_sub$Age <- as.numeric(data_Q_sub$Age)
View(data_Q_sub)
# Add a column for count of missing data per ppt
data_Q_sub <- data_Q_sub %>%
mutate(missingdata = rowSums(is.na(data_Q_sub)))
# Plot number of missing values
ggplot(data_Q_sub, aes(x = as.factor(Participant.Private.ID), y = missingdata)) +
geom_boxplot(fill = "slateblue", alpha = 0.2) +
xlab("Missing variables count")
# Plot to look for an elbow value
MissingData <- sort(data_Q_sub$missingdata, decreasing = FALSE)
plot(MissingData)
# Correlation between age and amount of missing values
gg_miss_fct(x = data_Q_sub, fct = Age)
cor.test(data_Q_sub$Age, data_Q_sub$missingdata, method = "spearman", exact = FALSE)
plot(MissingData)
View(data_Q_sub)
