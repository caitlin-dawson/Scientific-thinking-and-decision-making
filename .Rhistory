(Response == "SAM_1.2.PNG") ~ 2,
(Response == "SAM_1.3.PNG") ~ 3,
(Response == "SAM_1.4.PNG") ~ 4,
(Response == "SAM_1.5.PNG") ~ 5,
(Response == "SAM_1.6.PNG") ~ 6,
(Response == "SAM_1.7.PNG") ~ 7,
(Response == "SAM_1.8.PNG") ~ 8,
(Response == "SAM_1.9.PNG") ~ 9))
# SAM valence
data_citiT <- data_citiT %>%
mutate(SAMvalence = case_when((Response == "SAM_2.1.PNG") ~ 1,
(Response == "SAM_2.2.PNG") ~ 2,
(Response == "SAM_2.3.PNG") ~ 3,
(Response == "SAM_2.4.PNG") ~ 4,
(Response == "SAM_2.5.PNG") ~ 5,
(Response == "SAM_2.6.PNG") ~ 6,
(Response == "SAM_2.7.PNG") ~ 7,
(Response == "SAM_2.8.PNG") ~ 8,
(Response == "SAM_2.9.PNG") ~ 9))
# Curiosity (petition)
data_citiT <- data_citiT %>%
mutate(Curiosity = case_when((Response == "En ollenkaan uteliaasti") ~ 1,
(Response == "Hiukan uteliaasti") ~ 2,
(Response == "Jokseenkin uteliaasti") ~ 3,
(Response == "Hyvin uteliaasti") ~ 4,
(Response == "ErittÃ¤in uteliaasti") ~ 5))
# Interest (petition)
data_citiT <- data_citiT %>%
mutate(Interest = case_when(((Response == "Ei ollenkaan kiinnostava") |
(Response == "En ollenkaan kiinnostavana")) ~ 1,
((Response == "Hiukan kiinnostava") |
(Response == "Hiukan kiinnostavana")) ~ 2,
((Response == "Jokseenkin kiinnostava") |
(Response == "Jokseenkin kiinnostavana")) ~ 3,
((Response == "Hyvin kiinnostava") |
(Response == "Hyvin kiinnostavana")) ~ 4,
((Response == "ErittÃ¤in kiinnostava") |
(Response == "ErittÃ¤in kiinnostavana")) ~ 5))
# Familiar (petition)
data_citiT <- data_citiT %>%
mutate(Familiarity = case_when((Response == "Ei ollenkaan tuttu") ~ 1,
(Response == "Hiukan tuttu") ~ 2,
(Response == "Jokseenkin tuttu") ~ 3,
(Response == "Hyvin tuttu") ~ 4,
(Response == "ErittÃ¤in tuttu") ~ 5))
# Support (petition)
data_citiT <- data_citiT %>%
mutate(Support = case_when(((Response == "Varmasti en" & display == "Reading" & Screen.Name == "Screen 11") | (Response == "Varmasti en" & display == "Initial_assessment" & Screen.Name == "Screen 1") | (Response == "Varmasti en" & display == "PDF" & Screen.Name == "Screen 8")) ~ 1,
((Response == "Luultavasti en" & display == "Reading" & Screen.Name == "Screen 11") | (Response == "Luultavasti en" & display == "Initial_assessment" & Screen.Name == "Screen 1") | (Response == "Luultavasti en" & display == "PDF" & Screen.Name == "Screen 8")) ~ 2,
((Response == "En osaa sanoa" & display == "Reading" & Screen.Name == "Screen 11") | (Response == "En osaa sanoa" & display == "Initial_assessment" & Screen.Name == "Screen 1") | (Response == "En osaa sanoa" & display == "PDF" & Screen.Name == "Screen 8")) ~ 3,
((Response == "Luultavasti kyllÃ¤" & display == "Reading" & Screen.Name == "Screen 11") | (Response == "Luultavasti kyllÃ¤" & display == "Initial_assessment" & Screen.Name == "Screen 1") | (Response == "Luultavasti kyllÃ¤" & display == "PDF" & Screen.Name == "Screen 8")) ~ 4,
((Response == "Varmasti kyllÃ¤" & display == "Reading" & Screen.Name == "Screen 11") | (Response == "Varmasti kyllÃ¤" & display == "Initial_assessment" & Screen.Name == "Screen 1") | (Response == "Varmasti kyllÃ¤" & display == "PDF" & Screen.Name == "Screen 8")) ~ 5))
# Shareability (source)
data_citiT <- data_citiT %>%
mutate(Shareability = case_when(((Response == "Varmasti en" & display == "Reading" & Screen.Name == "Screen 2") | (Response == "Varmasti en" & display == "PDF" & Screen.Name == "Screen 7")) ~ 1,
((Response == "Luultavasti en" & display == "Reading" & Screen.Name == "Screen 2") | (Response == "Luultavasti en" & display == "PDF" & Screen.Name == "Screen 7")) ~ 2,
((Response == "En osaa sanoa" & display == "Reading" & Screen.Name == "Screen 2") | (Response == "En osaa sanoa" & display == "PDF" & Screen.Name == "Screen 7")) ~ 3,
((Response == "Luultavasti kyllÃ¤" & display == "Reading" & Screen.Name == "Screen 2") | (Response == "Luultavasti kyllÃ¤" & display == "PDF" & Screen.Name == "Screen 7")) ~ 4,
((Response == "Varmasti kyllÃ¤" & display == "Reading" & Screen.Name == "Screen 2") | (Response == "Varmasti kyllÃ¤" & display == "PDF" & Screen.Name == "Screen 7")) ~ 5))
# Convincingness (source)
data_citiT <- data_citiT %>%
mutate(Convincingness = case_when((Response == "Ei ollenkaan vakuuttava") ~ 1,
(Response == "Ei vakuuttava") ~ 2,
(Response == "Neutraali") ~ 3,
(Response == "Vakuuttava") ~ 4,
(Response == "ErittÃ¤in vakuuttava") ~ 5))
# Expertise (source)
data_citiT <- data_citiT %>%
mutate(Expertise = case_when((Response == "Ei ollenkaan") ~ 1,
(Response == "VÃ¤hÃ¤n") ~ 2,
(Response == "Jonkin verran") ~ 3,
(Response == "Paljon") ~ 4,
(Response == "Hyvin paljon") ~ 5))
# Reliability (source)
data_citiT <- data_citiT %>%
mutate(Reliability = case_when((Response == "ErittÃ¤in epÃ¤luotettava") ~ 1,
(Response == "EpÃ¤luotettava") ~ 2,
(Response == "Ei epÃ¤luotettava eikÃ¤ luotettava") ~ 3,
(Response == "Luotettava") ~ 4,
(Response == "ErittÃ¤in luotettava") ~ 5))
# Extract relevant information per participant per source
data_citiT_ratings <- data_citiT %>%
group_by(Participant.Private.ID, src_id) %>%
summarise(SAMintensity_final = mean(SAMintensity, na.rm = TRUE),
SAMvalence_final = mean(SAMvalence, na.rm = TRUE),
Curiosity_pet = mean(Curiosity, na.rm = TRUE),
Interest_pet = mean(Interest, na.rm = TRUE),
Familiarity_pet = mean(Familiarity, na.rm = TRUE),
Support_pet = mean(Support, na.rm = TRUE),
Shareability_src = mean(Shareability, na.rm = TRUE),
Convincingness_src = mean(Convincingness, na.rm = TRUE),
Expertise_src = mean(Expertise, na.rm = TRUE),
Reliability_src = mean(Reliability, na.rm = TRUE))
# Add column for word count per source (I counted the headings + "normal" text but no captions or author intros etc.)
data_citiT_ratings <- data_citiT_ratings %>%
mutate(src_words = case_when((src_id == 1) ~ 0,
(src_id == 2) ~ 408,
(src_id == 3) ~ 327,
(src_id == 4) ~ 892,
(src_id == 5) ~ 1146,
(src_id == 6) ~ 422,
(src_id == 7) ~ 376))
data_citiT_ratings[which(data_citiT_ratings$src_words == 0), "src_words"] <- NA
# NOTE: reading speed?
# Add order column
data_citiT_final <- merge(data_citiT_ratings, order_citiT,
by = "Participant.Private.ID")
# Replace NaNs with NAs
data_citiT_final[is.nan(data_citiT_final)] <- NA
# Check row sum NAs
colSums(is.na(data_citiT_final))
# Combine
data_citiT_final <- merge(data_citiT_final, data_citiT_RTs,
by = c("Participant.Private.ID", "src_id"),
all = TRUE)
# Fix overall RT so that there are no NAs
data_citiT_final$overall_rt <- rep(unique(data_citiT_final$overall_rt)[which(!is.na(unique(data_citiT_final$overall_rt)))], each = 7)
# Rearrange columns
data_citiT_final <- data_citiT_final %>%
select(Participant.Private.ID, order, src_id, src_words, src_rt, overall_rt, Shareability_src, Convincingness_src, Expertise_src, Reliability_src, SAMintensity_final, SAMvalence_final, Curiosity_pet, Interest_pet, Familiarity_pet, Support_pet)
# Exclude nonvalid participants
data_citiT_final <- merge(data_citiT_final, data_ConsentValidity,
by = "Participant.Private.ID",
all.x = TRUE)
# Validity/language filter; Exclude invalid participant
data_citiT_final <- data_citiT_final %>%
filter(Validity.quantised %in% c(1, NA, "") & Language %in% c("Sujuva / Ã¤idinkieli", "Keskitaso / keskusteleva","Muu, mikÃ¤?") & Participant.Private.ID != "4887029") %>%
select(Participant.Private.ID, order, src_id, src_words, src_rt, overall_rt, Shareability_src, Convincingness_src, Expertise_src, Reliability_src, SAMintensity_final, SAMvalence_final, Curiosity_pet, Interest_pet, Familiarity_pet, Support_pet)
# library(ISLR)
# library(glmnet)
# library(dplyr)
# library(tidyr)
# library(tidyverse)
library(caret)
# library(glmnet)
# library(tidyverse)
# library(tidyselect)
# library(psych)
# library(lavaan)
# library(dplyr)
# library(ggplot2)
# library(psychTools)
# library(GPArotation)
# library(devtools)
# library(apaTables)
# library(semPlot)
# library(sjPlot)
# library(glasso)
# Create task- and survey-only sets
survey_data <- data_efa[, q_var]
task_data <- data_efa[, t_var_log]
# A general note: we probably need to justify putting a bunch of task and self-report items in the same factor analysis / at least mention it !
# https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3268653/
# Descriptives
describe(data_efa)
# Create character strings with different classes of variables
con <- c("AMean", "CMean", "EMean", "ESMean", "OMean", "ICuriositySum", "DCuriositySum", "IH1Sum", "IH2Sum", "IH3Sum", "IH4Sum", "CloSum", "CogSum", "AOTSum", "RPSum", "sci_cur", "sci_tru", "sci_impo", "sci_id", "MatrixCorrectCount", "GNGdprime", "GNGbetalog", "MeanGoRT", "SDGoRTlog", "GlobalToLocalPrecedencelog", "GlobalToLocalInterferencelog", "NeckerTotalRatelog", "FlexSum")
q_con <- c("AMean", "CMean", "EMean", "ESMean", "OMean", "ICuriositySum", "DCuriositySum", "IH1Sum", "IH2Sum", "IH3Sum", "IH4Sum", "CloSum", "CogSum", "AOTSum", "RPSum", "sci_cur", "sci_tru", "sci_impo", "sci_id", "MatrixCorrectCount")
cat <- c("HEscore", "HRscore")
# Create a correlation matrix (polychoric/mixed correlations)
all_cor <- mixedCor(data = data_efa, d = cat, c = con,
use = "pairwise.complete.obs",
method = "spearman")
Q_cor <- mixedCor(data = survey_data, d = cat, c = q_con,
use = "pairwise.complete.obs",
method = "spearman")
T_cor <- mixedCor(data = task_data,
use = "pairwise.complete.obs",
method = "pearson")
# NOTE: Caitlin had specified other arguments as well but I am not sure how necessary there are?
# Store correlation matrix
all_rho <- all_cor$rho
Q_rho <- Q_cor$rho
T_rho <- T_cor$rho
# Mean correlation across items
mean(abs(all_rho[lower.tri(all_rho)]))
mean(abs(Q_rho[lower.tri(Q_rho)]))
mean(abs(T_rho[lower.tri(T_rho)]))
# Histogram of correlations
hist(abs(all_rho), breaks = 20, col = sample(colors(), 1))
hist(abs(Q_rho), breaks = 20, col = sample(colors(), 1))
hist(abs(T_rho), breaks = 20, col = sample(colors(), 1))
# Bartlett test (p<.05 indicates data are suitable for structure detection)
cortest.bartlett(all_rho, n = nrow(data_efa))
cortest.bartlett(Q_rho, n = nrow(data_efa))
cortest.bartlett(T_rho, n = nrow(data_efa))
# Kaiser-Meyer-Olkin measure (>.7 is good)
KMO(r = all_rho)
KMO(r = Q_rho)
KMO(r = T_rho)
# NOTE: KMO is not very good for a lot of items?
# Scree plots
# All variables
plot(eigen(all_rho)$values, type = "b", pch = 20, col = "red",
main = "Scree Plot", ylab = "Eigenvalues",
xlab = "No. Factors")
# Questionnaire variables
plot(eigen(Q_rho)$values, type = "b", pch = 20, col = "red",
main = "Scree Plot", ylab = "Eigenvalues",
xlab = "No. Factors")
# Task variables
plot(eigen(T_rho)$values, type = "b", pch = 20, col = "red",
main = "Scree Plot", ylab = "Eigenvalues",
xlab = "No. Factors")
# NFactors
# All variables
nfactors(all_rho, n = 6, n.obs  = 163,
rotate = "oblimin", diagonal = FALSE,
fm = "minrank")
# Questionnaires
nfactors(Q_rho, n = 6, n.obs  = 163,
rotate = "oblimin", diagonal = FALSE,
fm = "minrank")
# Tasks
nfactors(T_rho, n = 6, n.obs  = 163,
rotate = "oblimin", diagonal = FALSE,
fm = "minrank")
# Parallel Analysis
# All variables
fa.parallel(all_rho, n.obs = 163, fm = "minrank",
fa = "both", nfactors = 12)
cor.plot(all_rho)
# Scree plots
# All variables
plot(eigen(all_rho)$values, type = "b", pch = 20, col = "red",
main = "Scree Plot", ylab = "Eigenvalues",
xlab = "No. Factors")
# Questionnaire variables
plot(eigen(Q_rho)$values, type = "b", pch = 20, col = "red",
main = "Scree Plot", ylab = "Eigenvalues",
xlab = "No. Factors")
# Task variables
plot(eigen(T_rho)$values, type = "b", pch = 20, col = "red",
main = "Scree Plot", ylab = "Eigenvalues",
xlab = "No. Factors")
# NFactors
# All variables
nfactors(all_rho, n = 6, n.obs  = 163,
rotate = "oblimin", diagonal = FALSE,
fm = "minrank")
# Questionnaires
nfactors(Q_rho, n = 6, n.obs  = 163,
rotate = "oblimin", diagonal = FALSE,
fm = "minrank")
# Tasks
nfactors(T_rho, n = 6, n.obs  = 163,
rotate = "oblimin", diagonal = FALSE,
fm = "minrank")
# Parallel Analysis
# All variables
fa.parallel(all_rho, n.obs = 163, fm = "minrank",
fa = "both", nfactors = 12)
cor.plot(all_rho)
# Scree plots
# All variables
plot(eigen(all_rho)$values, type = "b", pch = 20, col = "red",
main = "Scree Plot", ylab = "Eigenvalues",
xlab = "No. Factors")
# Questionnaire variables
plot(eigen(Q_rho)$values, type = "b", pch = 20, col = "red",
main = "Scree Plot", ylab = "Eigenvalues",
xlab = "No. Factors")
# Task variables
plot(eigen(T_rho)$values, type = "b", pch = 20, col = "red",
main = "Scree Plot", ylab = "Eigenvalues",
xlab = "No. Factors")
# NFactors
# All variables
nfactors(all_rho, n = 6, n.obs  = 163,
rotate = "oblimin", diagonal = FALSE,
fm = "minrank")
# Questionnaires
nfactors(Q_rho, n = 6, n.obs  = 163,
rotate = "oblimin", diagonal = FALSE,
fm = "minrank")
# Tasks
nfactors(T_rho, n = 6, n.obs  = 163,
rotate = "oblimin", diagonal = FALSE,
fm = "minrank")
# Parallel Analysis
# All variables
fa.parallel(all_rho, n.obs = 163, fm = "minrank",
fa = "both", nfactors = 12)
# cor.plot(all_rho)
# Questionnaires
fa.parallel(Q_rho, n.obs = 162, fm = "wls",
fa = "both", nfactors = 6)
# cor.plot(Q_rho)
# Tasks
fa.parallel(T_rho, n.obs = 162, fm = "wls",
fa = "both", nfactors = 6)
# cor.plot(T_rho)
# All variables (not very relevant, previous analyses indicate that questionnaires and tasks should be analysed separately)
# EBIC: 6 factors
EFA_all6 <- fa(all_rho, nfactors = 6, rotate = "oblimin",
fm = "minrank", scores = "tenBerge")
fa.sort(EFA_all6)
# Questionnaires only
EFA_Q6 <- fa(Q_rho, nfactors = 6, rotate = "oblimin",
fm = "minrank", scores = "tenBerge")
fa.sort(EFA_Q6)
# Questionnaires only
# EBIC: 4 factors
EFA_Q4 <- fa(Q_rho, nfactors = 4, rotate = "oblimin",
fm = "minrank", scores = "tenBerge")
fa.sort(EFA_Q4)
fa.sort(EFA_Q4)
fa.sort(EFA_Q4)
fa.sort(EFA_Q6)
fa.sort(EFA_all6)
fa.sort(EFA_Q4)
colnames(survey_data)
survey_data[, -c("HEscore", "sci_impo", "DCuriositySum", "IH4Sum", "sci_tru")]
# Items to be removed (!= 1 primary salient loading AND complexity >= 2.0): HEscore, sci_impo, DCuriositySum, IH4Mean, sci_tru
any(colnames(survey_data == c("HEscore", "sci_impo", "DCuriositySum", "IH4Sum", "sci_tru")))
# Items to be removed (!= 1 primary salient loading AND complexity >= 2.0): HEscore, sci_impo, DCuriositySum, IH4Mean, sci_tru
survey_data_sub <- survey_data %>%
select(-c(c("HEscore", "sci_impo", "DCuriositySum", "IH4Sum", "sci_tru")))
colnames(survey_data_sub)
Q_cor_sub <- mixedCor(data = survey_data_sub, d = c("HRscore"),
c = c("AMean", "CMean", "EMean", "ESMean", "OMean",  "ICuriositySum", "IH1Sum", "IH2Sum", "IH3Sum", "CloSum", "CogSum", "AOTSum", "RPSum", "sci_cur", "sci_id", "MatrixCorrectCount"),
use = "pairwise.complete.obs",
method = "spearman")
# Items to be removed (!= 1 primary salient loading AND complexity >= 2.0): HEscore, sci_impo, DCuriositySum, IH4Mean, sci_tru
survey_data_sub <- survey_data %>%
select(-c(c("HEscore", "sci_impo", "DCuriositySum", "IH4Sum", "sci_tru")))
Q_cor_sub <- mixedCor(data = survey_data_sub, d = c("HRscore"),
c = c("AMean", "CMean", "EMean", "ESMean", "OMean",  "ICuriositySum", "IH1Sum", "IH2Sum", "IH3Sum", "CloSum", "CogSum", "AOTSum", "RPSum", "sci_cur", "sci_id", "MatrixCorrectCount"),
use = "pairwise.complete.obs",
method = "spearman")
Q_rho_sub <- mixedCor(data = survey_data_sub, d = c("HRscore"),
c = c("AMean", "CMean", "EMean", "ESMean", "OMean",  "ICuriositySum", "IH1Sum", "IH2Sum", "IH3Sum", "CloSum", "CogSum", "AOTSum", "RPSum", "sci_cur", "sci_id", "MatrixCorrectCount"),
use = "pairwise.complete.obs",
method = "spearman")
EFA_Q4_sub <- fa(Q_rho_sub, nfactors = 4, rotate = "oblimin",
fm = "minrank", scores = "tenBerge")
Q_rho_sub <- mixedCor(data = survey_data_sub, d = c("HRscore"),
c = c("AMean", "CMean", "EMean", "ESMean", "OMean",  "ICuriositySum", "IH1Sum", "IH2Sum", "IH3Sum", "CloSum", "CogSum", "AOTSum", "RPSum", "sci_cur", "sci_id", "MatrixCorrectCount"),
use = "pairwise.complete.obs",
method = "spearman")
EFA_Q4_sub <- fa(Q_rho_sub, nfactors = 4, rotate = "oblimin",
fm = "minrank", scores = "tenBerge")
Q_rho_sub
# Items to be removed (!= 1 primary salient loading AND complexity >= 2.0): HEscore, sci_impo, DCuriositySum, IH4Mean, sci_tru
survey_data_sub <- survey_data %>%
select(-c(c("HEscore", "sci_impo", "DCuriositySum", "IH4Sum", "sci_tru")))
survey_data_sub <- as.data.frame(survey_data_sub)
Q_rho_sub <- mixedCor(data = survey_data_sub, d = c("HRscore"),
c = c("AMean", "CMean", "EMean", "ESMean", "OMean",  "ICuriositySum", "IH1Sum", "IH2Sum", "IH3Sum", "CloSum", "CogSum", "AOTSum", "RPSum", "sci_cur", "sci_id", "MatrixCorrectCount"),
use = "pairwise.complete.obs",
method = "spearman")
EFA_Q4_sub <- fa(Q_rho_sub, nfactors = 4, rotate = "oblimin",
fm = "minrank", scores = "tenBerge")
q_con_sub <- c("AMean", "CMean", "EMean", "ESMean", "OMean",  "ICuriositySum", "IH1Sum", "IH2Sum", "IH3Sum", "CloSum", "CogSum", "AOTSum", "RPSum", "sci_cur", "sci_id", "MatrixCorrectCount")
q_cat_sub <- c("HRscore")
# Items to be removed (!= 1 primary salient loading AND complexity >= 2.0): HEscore, sci_impo, DCuriositySum, IH4Mean, sci_tru
survey_data_sub <- survey_data %>%
select(-c(c("HEscore", "sci_impo", "DCuriositySum", "IH4Sum", "sci_tru")))
survey_data_sub <- as.data.frame(survey_data_sub)
q_con_sub <- c("AMean", "CMean", "EMean", "ESMean", "OMean",  "ICuriositySum", "IH1Sum", "IH2Sum", "IH3Sum", "CloSum", "CogSum", "AOTSum", "RPSum", "sci_cur", "sci_id", "MatrixCorrectCount")
q_cat_sub <- c("HRscore")
Q_rho_sub <- mixedCor(data = survey_data_sub,
d = q_cat_sub,
c = q_con_sub,
use = "pairwise.complete.obs",
method = "spearman")
EFA_Q4_sub <- fa(Q_rho_sub, nfactors = 4, rotate = "oblimin",
fm = "minrank", scores = "tenBerge")
Q_rho_sub <- Q_rho_sub$rho
EFA_Q4_sub <- fa(Q_rho_sub, nfactors = 4, rotate = "oblimin",
fm = "minrank", scores = "tenBerge")
fa.sort(EFA_Q4_sub)
fa.sort(EFA_Q4_sub)
fa.sort(EFA_Q4_sub)
survey_data_sub2 <- survey_data_sub %>%
sleect(-c("EMean", "IH2Sum"))
survey_data_sub2 <- survey_data_sub %>%
select(-c("EMean", "IH2Sum"))
Q_rho_sub2 <- mixedCor(data = survey_data_sub2,
d = c("HRscore"),
c = c("AMean", "CMean", "ESMean", "OMean",  "ICuriositySum", "IH1Sum", "IH3Sum", "CloSum", "CogSum", "AOTSum", "RPSum", "sci_cur", "sci_id", "MatrixCorrectCount"),
use = "pairwise.complete.obs",
method = "spearman")
Q_rho_sub2 <- Q_rho_sub2$rho
EFA_Q4_sub2 <- fa(Q_rho_sub2, nfactors = 4, rotate = "oblimin",
fm = "minrank", scores = "tenBerge")
fa.sort(EFA_Q4_sub2)
fa.sort(EFA_Q4_sub2)
survey_data_sub3 <- survey_data_sub2 %>%
select(-c("AOTSum"))
Q_rho_sub3 <- mixedCor(data = survey_data_sub3,
d = c("HRscore"),
c = c("AMean", "CMean", "ESMean", "OMean",  "ICuriositySum", "IH1Sum", "IH3Sum", "CloSum", "CogSum", "RPSum", "sci_cur", "sci_id", "MatrixCorrectCount"),
use = "pairwise.complete.obs",
method = "spearman")
Q_rho_sub3 <- Q_rho_sub3$rho
EFA_Q4_sub3 <- fa(Q_rho_sub3, nfactors = 4, rotate = "oblimin",
fm = "minrank", scores = "tenBerge")
fa.sort(EFA_Q4_sub3)
fa.sort(EFA_Q4_sub3)
EFA_Q3_sub3 <- fa(Q_rho_sub3, nfactors = 3, rotate = "oblimin",
fm = "minrank", scores = "tenBerge")
fa.sort(EFA_Q3_sub3)
fa.sort(EFA_Q3_sub3)
fa.sort(EFA_Q6)
fa.sort(EFA_Q4)
fa.sort(EFA_Q6)
fa.sort(EFA_Q3_sub3)
fa.sort(EFA_Q3)
fa.sort(EFA_Q6)
# NFactors
# All variables
nfactors(all_rho, n = 6, n.obs  = 163,
rotate = "oblimin", diagonal = FALSE,
fm = "minrank")
# Questionnaires
nfactors(Q_rho, n = 6, n.obs  = 163,
rotate = "oblimin", diagonal = FALSE,
fm = "minrank")
# Tasks
nfactors(T_rho, n = 6, n.obs  = 163,
rotate = "oblimin", diagonal = FALSE,
fm = "minrank")
# Tasks only
EFA_T3 <- fa(T_rho, nfactors = 3, rotate = "oblimin",
fm = "minrank", scores = "tenBerge")
fa.sort(EFA_T3)
fa.sort(EFA_T3)
fa.sort(EFA_T3)
# All variables (not very relevant, previous analyses indicate that questionnaires and tasks should be analysed separately)
# EBIC: 6 factors
EFA_all6 <- fa(all_rho, nfactors = 6, rotate = "oblimin",
fm = "minrank", scores = "tenBerge")
fa.sort(EFA_all6)
fa.sort(EFA_all6)
fa.sort(EFA_all6)
# Questionnaires only
# EBIC: 4 factors
EFA_Q4 <- fa(Q_rho, nfactors = 4, rotate = "oblimin",
fm = "minrank", scores = "tenBerge")
# Items to be removed (!= 1 primary salient loading AND complexity >= 2.0): OMean, sci_tru, SDGoRTlog, AMean, FlexSum, sci_impo
data_efa_sub <- data_efa %>%
select(-c("OMean", "sci_tru", "SDGoRTlog", "AMean", "FlexSum", "sci_impo"))
# Items to be removed (!= 1 primary salient loading AND complexity >= 2.0): OMean, sci_tru, SDGoRTlog, AMean, FlexSum, sci_impo
data_efa_sub <- data_efa %>%
select(-c("OMean", "sci_tru", "SDGoRTlog", "AMean", "FlexSum", "sci_impo"))
all_rho_sub <- mixedCor(data = data_efa_sub,
d = cat,
c = c("CMean", "EMean", "ESMean", "ICuriositySum", "DCuriositySum", "IH1Sum", "IH2Sum", "IH3Sum", "IH4Sum", "CloSum", "CogSum", "AOTSum", "RPSum", "sci_cur", "sci_id", "MatrixCorrectCount", "GNGdprime", "GNGbetalog", "MeanGoRT", "GlobalToLocalPrecedencelog", "GlobalToLocalInterferencelog", "NeckerTotalRatelog"))
all_rho_sub <- all_rho_sub$rho
EFA_all6_sub <- fa(all_rho_sub, nfactors = 6, rotate = "oblimin",
fm = "minrank", scores = "tenBerge")
fa.sort(EFA_all6_sub)
fa.sort(EFA_all6_sub)
fa.sort(EFA_all6_sub)
data_efa_sub2 <- data_efa_sub %>%
select(-c("sci_id", "HEscore", "NeckerTotalRatelog", "MeanGoRT", "AOTSum"))
all_rho_sub2 <- mixedCor(data = data_efa_sub2,
d = c("HRscore"),
c = c("CMean", "EMean", "ESMean", "ICuriositySum", "DCuriositySum", "IH1Sum", "IH2Sum", "IH3Sum", "IH4Sum", "CloSum", "CogSum", "RPSum", "sci_cur", "MatrixCorrectCount", "GNGdprime", "GNGbetalog", "GlobalToLocalPrecedencelog", "GlobalToLocalInterferencelog"))
all_rho_sub2 <- all_rho_sub2$rho
data_efa_sub2 <- data_efa_sub %>%
select(-c("sci_id", "HEscore", "NeckerTotalRatelog", "MeanGoRT", "AOTSum"))
all_rho_sub2 <- mixedCor(data = data_efa_sub2,
d = c("HRscore"),
c = c("CMean", "EMean", "ESMean", "ICuriositySum", "DCuriositySum", "IH1Sum", "IH2Sum", "IH3Sum", "IH4Sum", "CloSum", "CogSum", "RPSum", "sci_cur", "MatrixCorrectCount", "GNGdprime", "GNGbetalog", "GlobalToLocalPrecedencelog", "GlobalToLocalInterferencelog"))
all_rho_sub2 <- all_rho_sub2$rho
EFA_all6_sub2 <- fa(all_rho_sub2, nfactors = 6, rotate = "oblimin",
fm = "minrank", scores = "tenBerge")
fa.sort(EFA_all6_sub2)
fa.sort(EFA_all6_sub2)
fa.sort(EFA_all6_sub2)
fa.sort(EFA_all6_sub2)
data_efa_sub3 <- data_efa_sub2 %>%
select(-c("IH2Sum"))
all_rho_sub3 <- mixedCor(data = data_efa_sub3,
d = c("HRscore"),
c = c("CMean", "EMean", "ESMean", "ICuriositySum", "DCuriositySum", "IH1Sum", "IH3Sum", "IH4Sum", "CloSum", "CogSum", "RPSum", "sci_cur", "MatrixCorrectCount", "GNGdprime", "GNGbetalog", "GlobalToLocalPrecedencelog", "GlobalToLocalInterferencelog"))
all_rho_sub3 <- all_rho_sub3$rho
EFA_all6_sub3 <- fa(all_rho_sub3, nfactors = 6, rotate = "oblimin",
fm = "minrank", scores = "tenBerge")
fa.sort(EFA_all6_sub3)
fa.sort(EFA_all6_sub3)
data_efa_sub4 <- data_efa_sub3 %>%
select(-c("IH4Sum"))
all_rho_sub4 <- mixedCor(data = data_efa_sub4,
d = c("HRscore"),
c = c("CMean", "EMean", "ESMean", "ICuriositySum", "DCuriositySum", "IH1Sum", "IH3Sum", "CloSum", "CogSum", "RPSum", "sci_cur", "MatrixCorrectCount", "GNGdprime", "GNGbetalog", "GlobalToLocalPrecedencelog", "GlobalToLocalInterferencelog"))
all_rho_sub4 <- all_rho_sub4$rho
EFA_all6_sub4 <- fa(all_rho_sub4, nfactors = 6, rotate = "oblimin",
fm = "minrank", scores = "tenBerge")
fa.sort(EFA_all6_sub4)
fa.sort(EFA_all6_sub4)
# Items look ok, but three factors have less than three primary loadings -> let's try with fewer factors
EFA_all5 <- fa(all_rho_sub4, nfactors = 5, rotate = "oblimin",
fm = "minrank", scores = "tenBerge")
fa.sort(EFA_all5)
fa.sort(EFA_all5)
EFA_all4 <- fa(all_rho_sub4, nfactors = 4, rotate = "oblimin",
fm = "minrank", scores = "tenBerge")
fa.sort(EFA_all4)
fa.sort(EFA_all4)
EFA_all3 <- fa(all_rho_sub4, nfactors = 3, rotate = "oblimin",
fm = "minrank", scores = "tenBerge")
fa.sort(EFA_all3)
fa.sort(EFA_all3)
# NFactors
# All variables
nfactors(all_rho, n = 6, n.obs  = 163,
rotate = "oblimin", diagonal = FALSE,
fm = "minrank")
nrow(data_efa)
